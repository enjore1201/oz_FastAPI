# AUTOGENERATED FROM 'app/queries/meeting/create_meeting.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations

import dataclasses
import uuid
from typing import cast

import edgedb

# class NoPydanticValidation:
#     @classmethod
#     def __get_pydantic_core_schema__(cls, _source_type, _handler):
#         # Pydantic 2.x
#         from pydantic_core.core_schema import any_schema
#
#         return any_schema()
#
#     @classmethod
#     def __get_validators__(cls):
#         # Pydantic 1.x
#         from pydantic.dataclasses import dataclass as pydantic_dataclass
#
#         _ = pydantic_dataclass(cls)
#         cls.__pydantic_model__.__get_validators__ = lambda: []
#         return []


@dataclasses.dataclass
class CreateMeetingResult:
    id: uuid.UUID
    url_code: str


async def create_meeting(
    executor: edgedb.AsyncIOExecutor,
    *,
    url_code: str,
) -> CreateMeetingResult:
    return cast(
        CreateMeetingResult,
        await executor.query_single(
            """\
        with
            url_code := <str>$url_code
        select (
            insert Meeting {
                url_code := url_code,
            }
        ) {url_code}\
        """,
            url_code=url_code,
        ),
    )


# if __name__ == '__main__':
#     async def main() -> None:
#         await create_meeting(edgedb_client, url_code=Base62.encode(uuid.uuid4().int))
#
#     asyncio.run(main())
